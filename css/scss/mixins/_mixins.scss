// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Init flexbox
@mixin flexbox() {
	display: flex;
	flex-flow: row wrap;
	flex: 0 1 auto;
}

@mixin transition($which: all, $time: 0.2s, $transition: ease-out) {
	transition: $which $time $transition;
}

@mixin full-size() {
  margin-left: calc( -100vw / 2 + 100% / 2 );
  margin-right: calc( -100vw / 2 + 100% / 2 );
  max-width: 100vw;
  width: 100vw;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin site-width() {
  padding-left: 16%;
  padding-right: 16%;

  @media ( max-width: $media__medium ) {
    padding-left: 10%;
    padding-right: 10%;
  }
  @media ( max-width: $media__small ) {
    padding-left: 4%;
    padding-right: 4%;
  }
}

@mixin site-width-left() {
  padding-left: 16%;

  @media ( max-width: $media__medium ) {
    padding-left: 10%;
  }
  @media ( max-width: $media__small ) {
    padding-left: 4%;
  }
}

@mixin site-width-right() {
  padding-right: 16%;

  @media ( max-width: $media__medium ) {
    padding-right: 10%;
  }
  @media ( max-width: $media__small ) {
    padding-right: 4%;
  }
}
